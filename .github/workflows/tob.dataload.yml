name: TOB Dataload

on:
  schedule:
    - cron: '0 * * * *'

env:
  TESSDATA_PREFIX: /usr/share/tesseract-ocr/4.00/tessdata/
  CHROMEDRIVER_VERSION: 115.0.5790.170

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: s2pl/TrainOnBoarding_DO
        token: ${{ secrets.PERSONAL_TOKEN }}


    
    - name: Setup environment
      run: |
        sudo apt update
        sudo apt install -y python3 python3-pip tesseract-ocr jq wget unzip

        pip3 install selenium pytesseract pillow

        mkdir -p $HOME/drivers
        cd $HOME/drivers

        # Determine the version of Chrome installed
        version=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+' | head -n 1)
        echo "Installed Chrome version: $version"

        # Fetch the appropriate ChromeDriver URL from the JSON file
        url=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json \
              | jq -r --arg version "$version" '.versions[] | select(.version == $version) | .downloads.chromedriver[] | select(.platform == "linux64") | .url')

        if [ -n "$url" ]; then
          echo "Found ChromeDriver URL for version $version: $url"
        fi

        # If exact version not found, fallback to closest available version
        if [ -z "$url" ]; then
          echo "Failed to find ChromeDriver URL for version $version. Falling back to closest version."

          # Fetch all versions and find the closest one
          closest_version=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json \
                        | jq -r --arg version "$version" '[.versions[].version | select(. < $version)] | max')
          echo "Closest version found: $closest_version"

          # Fetch the ChromeDriver URL for the closest version
          url=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json \
                | jq -r --arg closest_version "$closest_version" '.versions[] | select(.version == $closest_version) | .downloads.chromedriver[] | select(.platform == "linux64") | .url')

          if [ -z "$url" ]; then
            echo "Fallback failed. Unable to find ChromeDriver URL for closest version $closest_version."
            exit 1
          else
            echo "Found ChromeDriver URL for closest version $closest_version: $url"
          fi
        fi

        # Download and set up ChromeDriver
        wget $url -O chromedriver-linux64.zip
        unzip chromedriver-linux64.zip
        chmod +x chromedriver-linux64/chromedriver
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/

        # Download and set up geckodriver (optional)
        wget https://github.com/mozilla/geckodriver/releases/download/v0.33.0/geckodriver-v0.33.0-linux64.tar.gz
        tar -xzf geckodriver-v0.33.0-linux64.tar.gz
        chmod +x geckodriver
        sudo mv geckodriver /usr/local/bin/

    # - name: Install Requirements
    #   id: trainOnBoardingRequirementsInstallation
    #   run: pip3 install -r requirements.txt

    - name: Run automation.py
      id: trainOnBoardingAutomation
      run: python automation.py
